// Generated by rstantools.  Do not edit by hand.

/*
    muvamere is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    muvamere is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with muvamere.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_mvn_infer1e_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 43> locations_array__ =
  {" (found before start of program)",
  " (in 'mvn_infer1e', line 19, column 2 to column 35)",
  " (in 'mvn_infer1e', line 20, column 2 to column 47)",
  " (in 'mvn_infer1e', line 21, column 2 to column 21)",
  " (in 'mvn_infer1e', line 24, column 2 to column 32)",
  " (in 'mvn_infer1e', line 25, column 2 to column 57)",
  " (in 'mvn_infer1e', line 26, column 2 to column 57)",
  " (in 'mvn_infer1e', line 27, column 2 to column 29)",
  " (in 'mvn_infer1e', line 29, column 4 to column 20)",
  " (in 'mvn_infer1e', line 28, column 18 to line 30, column 3)",
  " (in 'mvn_infer1e', line 28, column 2 to line 30, column 3)",
  " (in 'mvn_infer1e', line 34, column 2 to column 47)",
  " (in 'mvn_infer1e', line 35, column 2 to column 45)",
  " (in 'mvn_infer1e', line 37, column 2 to column 40)",
  " (in 'mvn_infer1e', line 2, column 2 to column 11)",
  " (in 'mvn_infer1e', line 3, column 2 to column 9)",
  " (in 'mvn_infer1e', line 4, column 2 to column 9)",
  " (in 'mvn_infer1e', line 5, column 9 to column 13)",
  " (in 'mvn_infer1e', line 5, column 14 to column 16)",
  " (in 'mvn_infer1e', line 5, column 2 to column 20)",
  " (in 'mvn_infer1e', line 6, column 9 to column 13)",
  " (in 'mvn_infer1e', line 6, column 14 to column 16)",
  " (in 'mvn_infer1e', line 6, column 2 to column 20)",
  " (in 'mvn_infer1e', line 7, column 2 to column 21)",
  " (in 'mvn_infer1e', line 8, column 2 to column 20)",
  " (in 'mvn_infer1e', line 9, column 2 to column 23)",
  " (in 'mvn_infer1e', line 13, column 8 to column 12)",
  " (in 'mvn_infer1e', line 13, column 21 to column 23)",
  " (in 'mvn_infer1e', line 13, column 2 to column 28)",
  " (in 'mvn_infer1e', line 15, column 4 to column 18)",
  " (in 'mvn_infer1e', line 14, column 18 to line 16, column 3)",
  " (in 'mvn_infer1e', line 14, column 2 to line 16, column 3)",
  " (in 'mvn_infer1e', line 19, column 23 to column 25)",
  " (in 'mvn_infer1e', line 20, column 34 to column 36)",
  " (in 'mvn_infer1e', line 21, column 9 to column 11)",
  " (in 'mvn_infer1e', line 21, column 12 to column 14)",
  " (in 'mvn_infer1e', line 24, column 9 to column 13)",
  " (in 'mvn_infer1e', line 24, column 14 to column 16)",
  " (in 'mvn_infer1e', line 25, column 18 to column 20)",
  " (in 'mvn_infer1e', line 26, column 9 to column 11)",
  " (in 'mvn_infer1e', line 26, column 13 to column 15)",
  " (in 'mvn_infer1e', line 27, column 8 to column 12)",
  " (in 'mvn_infer1e', line 27, column 21 to column 23)"};
#include <stan_meta_header.hpp>
class model_mvn_infer1e final : public model_base_crtp<model_mvn_infer1e> {
private:
  int Nobs;
  int NP;
  int NV;
  Eigen::Matrix<double,-1,-1> X_data__;
  Eigen::Matrix<double,-1,-1> Y_data__;
  double beta_prior_sd;
  double tau_prior_sd;
  double lkj_prior_scale;
  std::vector<Eigen::Matrix<double,-1,1>> YA;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> Y{nullptr, 0, 0};
public:
  ~model_mvn_infer1e() {}
  model_mvn_infer1e(stan::io::var_context& context__, unsigned int
                    random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_mvn_infer1e_namespace::model_mvn_infer1e";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 14;
      context__.validate_dims("data initialization", "Nobs", "int",
        std::vector<size_t>{});
      Nobs = std::numeric_limits<int>::min();
      current_statement__ = 14;
      Nobs = context__.vals_i("Nobs")[(1 - 1)];
      current_statement__ = 15;
      context__.validate_dims("data initialization", "NP", "int",
        std::vector<size_t>{});
      NP = std::numeric_limits<int>::min();
      current_statement__ = 15;
      NP = context__.vals_i("NP")[(1 - 1)];
      current_statement__ = 16;
      context__.validate_dims("data initialization", "NV", "int",
        std::vector<size_t>{});
      NV = std::numeric_limits<int>::min();
      current_statement__ = 16;
      NV = context__.vals_i("NV")[(1 - 1)];
      current_statement__ = 17;
      stan::math::validate_non_negative_index("X", "Nobs", Nobs);
      current_statement__ = 18;
      stan::math::validate_non_negative_index("X", "NP", NP);
      current_statement__ = 19;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(Nobs),
          static_cast<size_t>(NP)});
      X_data__ = Eigen::Matrix<double,-1,-1>::Constant(Nobs, NP,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,-1>>(X_data__.data(), Nobs,
        NP);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 19;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 19;
        pos__ = 1;
        current_statement__ = 19;
        for (int sym1__ = 1; sym1__ <= NP; ++sym1__) {
          current_statement__ = 19;
          for (int sym2__ = 1; sym2__ <= Nobs; ++sym2__) {
            current_statement__ = 19;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 19;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 20;
      stan::math::validate_non_negative_index("Y", "Nobs", Nobs);
      current_statement__ = 21;
      stan::math::validate_non_negative_index("Y", "NV", NV);
      current_statement__ = 22;
      context__.validate_dims("data initialization", "Y", "double",
        std::vector<size_t>{static_cast<size_t>(Nobs),
          static_cast<size_t>(NV)});
      Y_data__ = Eigen::Matrix<double,-1,-1>::Constant(Nobs, NV,
                   std::numeric_limits<double>::quiet_NaN());
      new (&Y) Eigen::Map<Eigen::Matrix<double,-1,-1>>(Y_data__.data(), Nobs,
        NV);
      {
        std::vector<local_scalar_t__> Y_flat__;
        current_statement__ = 22;
        Y_flat__ = context__.vals_r("Y");
        current_statement__ = 22;
        pos__ = 1;
        current_statement__ = 22;
        for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
          current_statement__ = 22;
          for (int sym2__ = 1; sym2__ <= Nobs; ++sym2__) {
            current_statement__ = 22;
            stan::model::assign(Y, Y_flat__[(pos__ - 1)],
              "assigning variable Y", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 22;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 23;
      context__.validate_dims("data initialization", "beta_prior_sd",
        "double", std::vector<size_t>{});
      beta_prior_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 23;
      beta_prior_sd = context__.vals_r("beta_prior_sd")[(1 - 1)];
      current_statement__ = 24;
      context__.validate_dims("data initialization", "tau_prior_sd",
        "double", std::vector<size_t>{});
      tau_prior_sd = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 24;
      tau_prior_sd = context__.vals_r("tau_prior_sd")[(1 - 1)];
      current_statement__ = 25;
      context__.validate_dims("data initialization", "lkj_prior_scale",
        "double", std::vector<size_t>{});
      lkj_prior_scale = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 25;
      lkj_prior_scale = context__.vals_r("lkj_prior_scale")[(1 - 1)];
      current_statement__ = 26;
      stan::math::validate_non_negative_index("YA", "Nobs", Nobs);
      current_statement__ = 27;
      stan::math::validate_non_negative_index("YA", "NV", NV);
      current_statement__ = 28;
      YA = std::vector<Eigen::Matrix<double,-1,1>>(Nobs,
             Eigen::Matrix<double,-1,1>::Constant(NV,
               std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 31;
      for (int i = 1; i <= Nobs; ++i) {
        current_statement__ = 29;
        stan::model::assign(YA,
          stan::math::transpose(
            stan::model::rvalue(Y, "Y", stan::model::index_uni(i))),
          "assigning variable YA", stan::model::index_uni(i));
      }
      current_statement__ = 32;
      stan::math::validate_non_negative_index("L_Omega", "NV", NV);
      current_statement__ = 32;
      stan::math::validate_non_negative_index("L_Omega", "NV", NV);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("tau_unif", "NV", NV);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("Beta", "NP", NP);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("Beta", "NV", NV);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("mu", "Nobs", Nobs);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("mu", "NV", NV);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("tau", "NV", NV);
      current_statement__ = 39;
      stan::math::validate_non_negative_index("omega", "NV", NV);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("omega", "NV", NV);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("muA", "Nobs", Nobs);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("muA", "NV", NV);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = ((NV * (NV - 1)) / 2) + NV + (NP * NV);
  }
  inline std::string model_name() const final {
    return "model_mvn_infer1e";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_mvn_infer1e_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,-1> L_Omega =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(NV, NV, DUMMY_VAR__);
      current_statement__ = 1;
      L_Omega = in__.template read_constrain_cholesky_factor_corr<
                  Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                  NV);
      Eigen::Matrix<local_scalar_t__,-1,1> tau_unif =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NV, DUMMY_VAR__);
      current_statement__ = 2;
      tau_unif = in__.template read_constrain_lub<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                   (stan::math::pi() / 2), lp__, NV);
      Eigen::Matrix<local_scalar_t__,-1,-1> Beta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(NP, NV, DUMMY_VAR__);
      current_statement__ = 3;
      Beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(NP,
               NV);
      Eigen::Matrix<local_scalar_t__,-1,-1> mu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(Nobs, NV,
          DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(mu, stan::math::multiply(X, Beta),
        "assigning variable mu");
      Eigen::Matrix<local_scalar_t__,-1,1> tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NV, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(tau,
        stan::math::multiply(tau_prior_sd, stan::math::tan(tau_unif)),
        "assigning variable tau");
      Eigen::Matrix<local_scalar_t__,-1,-1> omega =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(NV, NV, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(omega, stan::math::diag_pre_multiply(tau, L_Omega),
        "assigning variable omega");
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> muA =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(Nobs,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NV, DUMMY_VAR__));
      current_statement__ = 10;
      for (int i = 1; i <= Nobs; ++i) {
        current_statement__ = 8;
        stan::model::assign(muA,
          stan::math::transpose(
            stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
          "assigning variable muA", stan::model::index_uni(i));
      }
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "tau", tau, 0);
      {
        current_statement__ = 11;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(L_Omega,
                         lkj_prior_scale));
        current_statement__ = 12;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(
                         stan::math::to_vector(Beta), 0, beta_prior_sd));
        current_statement__ = 13;
        lp_accum__.add(stan::math::multi_normal_cholesky_lpdf<propto__>(YA,
                         muA, omega));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_mvn_infer1e_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,-1> L_Omega =
        Eigen::Matrix<double,-1,-1>::Constant(NV, NV,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      L_Omega = in__.template read_constrain_cholesky_factor_corr<
                  Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
                  NV);
      Eigen::Matrix<double,-1,1> tau_unif =
        Eigen::Matrix<double,-1,1>::Constant(NV,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      tau_unif = in__.template read_constrain_lub<
                   Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0,
                   (stan::math::pi() / 2), lp__, NV);
      Eigen::Matrix<double,-1,-1> Beta =
        Eigen::Matrix<double,-1,-1>::Constant(NP, NV,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      Beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(NP,
               NV);
      Eigen::Matrix<double,-1,-1> mu =
        Eigen::Matrix<double,-1,-1>::Constant(Nobs, NV,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> tau =
        Eigen::Matrix<double,-1,1>::Constant(NV,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> omega =
        Eigen::Matrix<double,-1,-1>::Constant(NV, NV,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,1>> muA =
        std::vector<Eigen::Matrix<double,-1,1>>(Nobs,
          Eigen::Matrix<double,-1,1>::Constant(NV,
            std::numeric_limits<double>::quiet_NaN()));
      out__.write(L_Omega);
      out__.write(tau_unif);
      out__.write(Beta);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 4;
      stan::model::assign(mu, stan::math::multiply(X, Beta),
        "assigning variable mu");
      current_statement__ = 5;
      stan::model::assign(tau,
        stan::math::multiply(tau_prior_sd, stan::math::tan(tau_unif)),
        "assigning variable tau");
      current_statement__ = 6;
      stan::model::assign(omega, stan::math::diag_pre_multiply(tau, L_Omega),
        "assigning variable omega");
      current_statement__ = 10;
      for (int i = 1; i <= Nobs; ++i) {
        current_statement__ = 8;
        stan::model::assign(muA,
          stan::math::transpose(
            stan::model::rvalue(mu, "mu", stan::model::index_uni(i))),
          "assigning variable muA", stan::model::index_uni(i));
      }
      current_statement__ = 5;
      stan::math::check_greater_or_equal(function__, "tau", tau, 0);
      if (emit_transformed_parameters__) {
        out__.write(mu);
        out__.write(tau);
        out__.write(omega);
        for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= Nobs; ++sym2__) {
            out__.write(muA[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> L_Omega =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(NV, NV, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(L_Omega,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(NV, NV),
        "assigning variable L_Omega");
      out__.write_free_cholesky_factor_corr(L_Omega);
      Eigen::Matrix<local_scalar_t__,-1,1> tau_unif =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NV, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(tau_unif,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(NV),
        "assigning variable tau_unif");
      out__.write_free_lub(0, (stan::math::pi() / 2), tau_unif);
      Eigen::Matrix<local_scalar_t__,-1,-1> Beta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(NP, NV, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(Beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(NP, NV),
        "assigning variable Beta");
      out__.write(Beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "L_Omega",
        "double",
        std::vector<size_t>{static_cast<size_t>(NV), static_cast<size_t>(NV)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "tau_unif",
        "double", std::vector<size_t>{static_cast<size_t>(NV)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "Beta", "double",
        std::vector<size_t>{static_cast<size_t>(NP), static_cast<size_t>(NV)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,-1> L_Omega =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(NV, NV, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> L_Omega_flat__;
        current_statement__ = 1;
        L_Omega_flat__ = context__.vals_r("L_Omega");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= NV; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(L_Omega, L_Omega_flat__[(pos__ - 1)],
              "assigning variable L_Omega", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_cholesky_factor_corr(L_Omega);
      Eigen::Matrix<local_scalar_t__,-1,1> tau_unif =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(NV, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> tau_unif_flat__;
        current_statement__ = 2;
        tau_unif_flat__ = context__.vals_r("tau_unif");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(tau_unif, tau_unif_flat__[(pos__ - 1)],
            "assigning variable tau_unif", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lub(0, (stan::math::pi() / 2), tau_unif);
      Eigen::Matrix<local_scalar_t__,-1,-1> Beta =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(NP, NV, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> Beta_flat__;
        current_statement__ = 3;
        Beta_flat__ = context__.vals_r("Beta");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= NP; ++sym2__) {
            current_statement__ = 3;
            stan::model::assign(Beta, Beta_flat__[(pos__ - 1)],
              "assigning variable Beta", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 3;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(Beta);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"L_Omega", "tau_unif", "Beta"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"mu", "tau", "omega", "muA"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    NV),
                                                 static_cast<size_t>(NV)},
                std::vector<size_t>{static_cast<size_t>(NV)},
                std::vector<size_t>{static_cast<size_t>(NP),
                  static_cast<size_t>(NV)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(Nobs),
               static_cast<size_t>(NV)},
             std::vector<size_t>{static_cast<size_t>(NV)},
             std::vector<size_t>{static_cast<size_t>(NV),
               static_cast<size_t>(NV)},
             std::vector<size_t>{static_cast<size_t>(Nobs),
               static_cast<size_t>(NV)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= NV; ++sym2__) {
        param_names__.emplace_back(std::string() + "L_Omega" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau_unif" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= NP; ++sym2__) {
        param_names__.emplace_back(std::string() + "Beta" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Nobs; ++sym2__) {
          param_names__.emplace_back(std::string() + "mu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
        param_names__.emplace_back(std::string() + "tau" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= NV; ++sym2__) {
          param_names__.emplace_back(std::string() + "omega" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Nobs; ++sym2__) {
          param_names__.emplace_back(std::string() + "muA" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= ((NV * (NV - 1)) / 2); ++sym1__) {
      param_names__.emplace_back(std::string() + "L_Omega" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
      param_names__.emplace_back(std::string() + "tau_unif" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= NP; ++sym2__) {
        param_names__.emplace_back(std::string() + "Beta" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Nobs; ++sym2__) {
          param_names__.emplace_back(std::string() + "mu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
        param_names__.emplace_back(std::string() + "tau" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= NV; ++sym2__) {
          param_names__.emplace_back(std::string() + "omega" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= NV; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Nobs; ++sym2__) {
          param_names__.emplace_back(std::string() + "muA" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"L_Omega\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NV) + ",\"cols\":" + std::to_string(NV) + "},\"block\":\"parameters\"},{\"name\":\"tau_unif\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NV) + "},\"block\":\"parameters\"},{\"name\":\"Beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NP) + ",\"cols\":" + std::to_string(NV) + "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Nobs) + ",\"cols\":" + std::to_string(NV) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NV) + "},\"block\":\"transformed_parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NV) + ",\"cols\":" + std::to_string(NV) + "},\"block\":\"transformed_parameters\"},{\"name\":\"muA\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nobs) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(NV) + "}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"L_Omega\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((NV * (NV - 1)) /2)) + "},\"block\":\"parameters\"},{\"name\":\"tau_unif\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NV) + "},\"block\":\"parameters\"},{\"name\":\"Beta\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NP) + ",\"cols\":" + std::to_string(NV) + "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(Nobs) + ",\"cols\":" + std::to_string(NV) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(NV) + "},\"block\":\"transformed_parameters\"},{\"name\":\"omega\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(NV) + ",\"cols\":" + std::to_string(NV) + "},\"block\":\"transformed_parameters\"},{\"name\":\"muA\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Nobs) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(NV) + "}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((NV * NV) + NV) + (NP * NV));
    const size_t num_transformed = emit_transformed_parameters * (((((Nobs *
      NV) + NV) + (NV * NV)) + (Nobs * NV)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((NV * NV) + NV) + (NP * NV));
    const size_t num_transformed = emit_transformed_parameters * (((((Nobs *
      NV) + NV) + (NV * NV)) + (Nobs * NV)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_mvn_infer1e_namespace::model_mvn_infer1e;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_mvn_infer1e_namespace::profiles__;
}
#endif
#endif
